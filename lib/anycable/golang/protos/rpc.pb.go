// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package anycable is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	ConnectionRequest
	ConnectionResponse
	CommandMessage
	CommandResponse
	DisconnectRequest
	DisconnectResponse
*/
package anycable

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_ERROR   Status = 0
	Status_SUCCESS Status = 1
)

var Status_name = map[int32]string{
	0: "ERROR",
	1: "SUCCESS",
}
var Status_value = map[string]int32{
	"ERROR":   0,
	"SUCCESS": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConnectionRequest struct {
	Path    string            `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ConnectionRequest) Reset()                    { *m = ConnectionRequest{} }
func (m *ConnectionRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectionRequest) ProtoMessage()               {}
func (*ConnectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConnectionRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

type ConnectionResponse struct {
	Status        Status   `protobuf:"varint,1,opt,name=status,enum=anycable.Status" json:"status,omitempty"`
	Identifiers   string   `protobuf:"bytes,2,opt,name=identifiers" json:"identifiers,omitempty"`
	Transmissions []string `protobuf:"bytes,3,rep,name=transmissions" json:"transmissions,omitempty"`
}

func (m *ConnectionResponse) Reset()                    { *m = ConnectionResponse{} }
func (m *ConnectionResponse) String() string            { return proto.CompactTextString(m) }
func (*ConnectionResponse) ProtoMessage()               {}
func (*ConnectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CommandMessage struct {
	Command               string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Identifier            string `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	ConnectionIdentifiers string `protobuf:"bytes,3,opt,name=connection_identifiers,json=connectionIdentifiers" json:"connection_identifiers,omitempty"`
	Data                  string `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CommandMessage) Reset()                    { *m = CommandMessage{} }
func (m *CommandMessage) String() string            { return proto.CompactTextString(m) }
func (*CommandMessage) ProtoMessage()               {}
func (*CommandMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CommandResponse struct {
	Status        Status   `protobuf:"varint,1,opt,name=status,enum=anycable.Status" json:"status,omitempty"`
	Disconnect    bool     `protobuf:"varint,2,opt,name=disconnect" json:"disconnect,omitempty"`
	StopStreams   bool     `protobuf:"varint,3,opt,name=stop_streams,json=stopStreams" json:"stop_streams,omitempty"`
	StreamFrom    bool     `protobuf:"varint,4,opt,name=stream_from,json=streamFrom" json:"stream_from,omitempty"`
	StreamId      string   `protobuf:"bytes,5,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Transmissions []string `protobuf:"bytes,6,rep,name=transmissions" json:"transmissions,omitempty"`
}

func (m *CommandResponse) Reset()                    { *m = CommandResponse{} }
func (m *CommandResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()               {}
func (*CommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DisconnectRequest struct {
	Identifiers   string   `protobuf:"bytes,1,opt,name=identifiers" json:"identifiers,omitempty"`
	Subscriptions []string `protobuf:"bytes,2,rep,name=subscriptions" json:"subscriptions,omitempty"`
}

func (m *DisconnectRequest) Reset()                    { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string            { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()               {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DisconnectResponse struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=anycable.Status" json:"status,omitempty"`
}

func (m *DisconnectResponse) Reset()                    { *m = DisconnectResponse{} }
func (m *DisconnectResponse) String() string            { return proto.CompactTextString(m) }
func (*DisconnectResponse) ProtoMessage()               {}
func (*DisconnectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*ConnectionRequest)(nil), "anycable.ConnectionRequest")
	proto.RegisterType((*ConnectionResponse)(nil), "anycable.ConnectionResponse")
	proto.RegisterType((*CommandMessage)(nil), "anycable.CommandMessage")
	proto.RegisterType((*CommandResponse)(nil), "anycable.CommandResponse")
	proto.RegisterType((*DisconnectRequest)(nil), "anycable.DisconnectRequest")
	proto.RegisterType((*DisconnectResponse)(nil), "anycable.DisconnectResponse")
	proto.RegisterEnum("anycable.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RPC service

type RPCClient interface {
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	Subscribe(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandResponse, error)
	Unsubscribe(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandResponse, error)
	Perform(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandResponse, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := grpc.Invoke(ctx, "/anycable.RPC/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Subscribe(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/anycable.RPC/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Unsubscribe(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/anycable.RPC/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Perform(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/anycable.RPC/Perform", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := grpc.Invoke(ctx, "/anycable.RPC/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC service

type RPCServer interface {
	Connect(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	Subscribe(context.Context, *CommandMessage) (*CommandResponse, error)
	Unsubscribe(context.Context, *CommandMessage) (*CommandResponse, error)
	Perform(context.Context, *CommandMessage) (*CommandResponse, error)
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anycable.RPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Connect(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anycable.RPC/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Subscribe(ctx, req.(*CommandMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anycable.RPC/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Unsubscribe(ctx, req.(*CommandMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Perform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Perform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anycable.RPC/Perform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Perform(ctx, req.(*CommandMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anycable.RPC/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anycable.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _RPC_Connect_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _RPC_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _RPC_Unsubscribe_Handler,
		},
		{
			MethodName: "Perform",
			Handler:    _RPC_Perform_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _RPC_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xae, 0x93, 0x26, 0x8e, 0x9f, 0x4b, 0x49, 0x9f, 0x00, 0x99, 0x14, 0x41, 0xb0, 0x58, 0x44,
	0x2c, 0xb2, 0x08, 0x42, 0x42, 0x5d, 0x20, 0x84, 0x9b, 0x8a, 0x2c, 0x10, 0xd5, 0x58, 0x5d, 0xb1,
	0x88, 0x26, 0xf6, 0x84, 0x5a, 0xd4, 0x63, 0x33, 0x33, 0x41, 0xca, 0x05, 0xb8, 0x01, 0x67, 0xe0,
	0x5e, 0x88, 0x83, 0x60, 0x7b, 0x9c, 0x66, 0x8a, 0x23, 0x24, 0xca, 0x6e, 0xe6, 0x7b, 0xcf, 0xdf,
	0xf7, 0xbd, 0x9f, 0x31, 0x38, 0x22, 0x8f, 0xc6, 0xb9, 0xc8, 0x54, 0x86, 0x3d, 0xca, 0xd7, 0x11,
	0x5d, 0x5c, 0x31, 0xff, 0x87, 0x05, 0x47, 0x41, 0xc6, 0x39, 0x8b, 0x54, 0x92, 0x71, 0xc2, 0xbe,
	0xac, 0x98, 0x54, 0x88, 0xb0, 0x9f, 0x53, 0x75, 0xe9, 0x59, 0x43, 0x6b, 0xe4, 0x90, 0xea, 0x8c,
	0x6f, 0xc1, 0xbe, 0x64, 0x34, 0x66, 0x42, 0x7a, 0xad, 0x61, 0x7b, 0xe4, 0x4e, 0x46, 0xe3, 0x0d,
	0xcb, 0xb8, 0xc1, 0x30, 0x7e, 0xa7, 0x53, 0xa7, 0x5c, 0x89, 0x35, 0xd9, 0x7c, 0x38, 0x38, 0x81,
	0x03, 0x33, 0x80, 0x7d, 0x68, 0x7f, 0x66, 0xeb, 0x5a, 0xa6, 0x3c, 0xe2, 0x3d, 0xe8, 0x7c, 0xa5,
	0x57, 0x2b, 0x56, 0x68, 0x94, 0x98, 0xbe, 0x9c, 0xb4, 0x5e, 0x59, 0xfe, 0x37, 0x0b, 0xd0, 0xd4,
	0x91, 0x79, 0xc6, 0x25, 0xc3, 0x11, 0x74, 0xa5, 0xa2, 0x6a, 0x25, 0x2b, 0x96, 0xc3, 0x49, 0x7f,
	0xeb, 0x2a, 0xac, 0x70, 0x52, 0xc7, 0x71, 0x08, 0x6e, 0x12, 0x33, 0xae, 0x92, 0x65, 0xa2, 0x8b,
	0x28, 0x05, 0x4c, 0x08, 0x9f, 0xc1, 0x1d, 0x25, 0x28, 0x97, 0x69, 0x22, 0x65, 0xa1, 0x21, 0xbd,
	0x76, 0x51, 0xa8, 0x43, 0x6e, 0x82, 0xfe, 0x77, 0x0b, 0x0e, 0x83, 0x2c, 0x4d, 0x29, 0x8f, 0xdf,
	0x33, 0x29, 0xe9, 0x27, 0x86, 0x1e, 0xd8, 0x91, 0x46, 0xea, 0x5a, 0x36, 0x57, 0x7c, 0x0c, 0xb0,
	0x55, 0xa8, 0x35, 0x0d, 0x04, 0x5f, 0xc2, 0x83, 0xe8, 0xba, 0xa8, 0xb9, 0xe9, 0xaf, 0x5d, 0xe5,
	0xde, 0xdf, 0x46, 0x67, 0x86, 0xd3, 0x62, 0x40, 0x31, 0x55, 0xd4, 0xdb, 0xd7, 0x03, 0x2a, 0xcf,
	0xfe, 0x4f, 0x0b, 0xee, 0xd6, 0xbe, 0x6e, 0xd1, 0x9d, 0xc2, 0x68, 0x9c, 0xc8, 0x5a, 0xad, 0x32,
	0xda, 0x23, 0x06, 0x82, 0x4f, 0xe1, 0x40, 0xaa, 0x2c, 0x9f, 0x4b, 0x25, 0x18, 0x4d, 0xb5, 0xbd,
	0x1e, 0x71, 0x4b, 0x2c, 0xd4, 0x10, 0x3e, 0x01, 0x57, 0x47, 0xe7, 0x4b, 0x91, 0xa5, 0x95, 0xb7,
	0x82, 0x43, 0x43, 0x67, 0x05, 0x82, 0xc7, 0xe0, 0xd4, 0x09, 0x49, 0xec, 0x75, 0x2a, 0xeb, 0x3d,
	0x0d, 0xcc, 0xe2, 0x66, 0xf3, 0xbb, 0xbb, 0x9a, 0xff, 0x11, 0x8e, 0x4e, 0xaf, 0x4d, 0x6d, 0xd6,
	0xf5, 0x8f, 0xc9, 0x5a, 0x3b, 0x27, 0x2b, 0x57, 0x0b, 0x19, 0x89, 0x24, 0x57, 0x15, 0x79, 0x4b,
	0x93, 0xdf, 0x00, 0xfd, 0xd7, 0x80, 0x26, 0xf9, 0xbf, 0xf6, 0xf0, 0xf9, 0x10, 0xba, 0x1a, 0x41,
	0x07, 0x3a, 0x53, 0x42, 0x3e, 0x90, 0xfe, 0x1e, 0xba, 0x60, 0x87, 0x17, 0x41, 0x30, 0x0d, 0xc3,
	0xbe, 0x35, 0xf9, 0xd5, 0x82, 0x36, 0x39, 0x0f, 0xf0, 0x0c, 0xec, 0x7a, 0x97, 0xf1, 0xf8, 0x2f,
	0xcf, 0x68, 0xf0, 0x68, 0x77, 0x50, 0x3b, 0xf3, 0xf7, 0x8a, 0x47, 0xe9, 0x84, 0xba, 0x84, 0x45,
	0xb1, 0x85, 0x66, 0xb2, 0xb9, 0x9f, 0x83, 0x87, 0x8d, 0x88, 0xc1, 0x71, 0x0a, 0xee, 0x05, 0x97,
	0xff, 0xcb, 0xf2, 0x06, 0xec, 0x73, 0x26, 0x96, 0x99, 0x48, 0x6f, 0xcb, 0x30, 0x03, 0xd8, 0x76,
	0xdf, 0x6c, 0x4b, 0x63, 0xe0, 0x66, 0x5b, 0x9a, 0x03, 0xf3, 0xf7, 0x16, 0xdd, 0xea, 0x37, 0xf7,
	0xe2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0x6e, 0xc5, 0x83, 0xf3, 0x04, 0x00, 0x00,
}
